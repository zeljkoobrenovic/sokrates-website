---
layout: post
title:  "Begin With the End in Mind: Sokrates Reports"
date:   2020-05-25 19:12:01 +0100
author: by Željko Obrenović (zeljkoobrenovic.com)
permalink: examples
icon: reports
excerpt: "Before we zoom into the details of Sokrates, let's first see what insights Sokrates can give you. Sokrates makes visible the size, complexity, and coupling of software. More specifically, Sokrates generates several views on your source code, describing the overall source code characteristics, duplication, components, dependencies, conditional complexity, etc."
---

Before we zoom into the details of Sokrates, let's first see what insights Sokrates can give you. Sokrates makes visible the size, complexity, and coupling of software. More specifically, Sokrates generates several views on your source code, describing the overall source code characteristics, duplication, components, dependencies, conditional complexity, etc.

<br/>
## Explore Sokrates Gallery

In this book, you will find many details about Sokrates and the way it processes source code. However, if you find this discussion too abstract, [Sokrates website](https://www.sokrates.dev/) provides a gallery with the results of analyses of 66 open-source projects in 24 programming languages. Each project includes both the results of Sokrates analyses as well as a configuration file used to configure the analysis.

![](assets/images/sokrates/sokrates-gallery.png)
**Figure 1:** The screenshot of the Sokrates' gallery. The gallery is a collection of Sokrates' projects, with the analysis of popular open-source projects.**



<br/>
<br/>
## Sokrates Reports

*"Story tells the facts. Facts do not tell the story."* [Story-based inquiry: a manual for investigative journalists](https://unesdoc.unesco.org/ark:/48223/pf0000193078)

Sokrates' reports are the result of Sokrates' analyses.  The reports shedding light on your source code from different angles.

![](assets/images/sokrates/reports-index.png)
***Figure 1:** The screenshot of [the index page of the Sokrates reports](https://d3axxy9bcycpv7.cloudfront.net/java/tomcat/reports/html/index.html) for the Tomcat project.*

<br/>
### Source Code Overview Report

![](assets/images/icons/overview.svg)

The Sokrates' Overview report presents the basic facts about your source code and Sokrates analysis, answering the following two questions:

* Which files are includes in and excluded from the analysis?
* How are files classified (main, test, build, generated...)?

To learn more:
* See an [example of a Sokrates Overview Report](https://d3axxy9bcycpv7.cloudfront.net/java/junit4/reports/html/SourceCodeOverview.html).
* Learn more about [how Sokrates scopes the files](scoping).


<br/>
### Duplication Report

![](assets/images/icons/duplication.svg)

The Sokrates duplication report presents the duplicates in your code, answering the following questions:
* How much duplication is there overall?
* How is duplication distributed per file type?
* How is duplication distributed per logical decomposition (i.e., per component)?
* How much of duplication is there between the components?
* What are the biggest duplicates?
* What are the most frequently duplicated pieces of code?

To learn more:
* See an [example of a Sokrates Duplication Report](https://d3axxy9bcycpv7.cloudfront.net/java/junit4/reports/html/Duplication.html).
* Learn more about [how Sokrates calculates duplication](duplication).


<br/>
### Components and Dependencies Report

![](assets/images/icons/code_organization.svg)

Logical decomposition is a representation of the source code organization, where each file needs to end up in only one logical component. The Sokrates visualizes the components and dependencies among them, answering the following questions:

* What logical decompositions have you defined?
* How many components are they in each logical decomposition?
* How big are the components? What are the most prominent or smallest components?
* What are the dependencies among the components? Where are they?

To learn more:
* See an example of a [Sokrates Components and Dependencies Report](https://d3axxy9bcycpv7.cloudfront.net/java/junit4/reports/html/Components.html).
* Learn more about [how Sokrates analyzes logical decompositions](logical-decomposition).


<br/>
### Cross-Cutting Concerns Report

![](assets/images/icons/concerns.svg)

Cross-cutting concerns are aspects of a software system that you cannot cleanly decompose from the rest of the system. Typical examples include security and logging.

Sokrates analyses cross-cutting concerns, answering the following questions:
* How many cross-cutting concerns have you defined?
* How many files are in each concern? How many lines of code?
* Is there an overlap between concerns (the same file being in multiple concerns)? How much of the overlay is there (number of files, lines of code)?

To learn more:
* See an example of a [Sokrates Cross-Cutting Report](https://d3axxy9bcycpv7.cloudfront.net/java/sokrates/reports/html/CrossCuttingConcerns.html).
* Learn more about [how Sokrates analyzes cross-cutting concerns](cross-cutting-concerns).



<br/>
### File Size Report

![](assets/images/icons/file_size.svg)

File size measurements show the distribution of size of files.

Files are classified in four categories based on their size (lines of code): 1-200 (small files), 200-500 (medium size files), 501-1000 (long files), 1001+ (very long files).

To learn more:
* See an example of a [Sokrates File Size report](https://d3axxy9bcycpv7.cloudfront.net/java/junit4/reports/html/FileSize.html).
* Learn more about [how Sokrates analyzes file size](file-size).


<br/>
### File History Report

![](assets/images/icons/file_history.svg)

To learn more:
* See an example of a [Sokrates File History report](https://d3axxy9bcycpv7.cloudfront.net/java/junit4/reports/html/FileHistory.html).
* Learn more about [how Sokrates analyzes file history](file-history).


<br/>
### Unit Size Report

![](assets/images/icons/units.svg)

Unit size measurements show the distribution of size of units of code (methods, functions...).

Units are classified in four categories based on their size (lines of code): 1-20 (small units), 20-50 (medium size units), 51-100 (long units), 101+ (very long units).

To learn more:
* See an example of a [Sokrates Unit Size report](https://d3axxy9bcycpv7.cloudfront.net/java/junit4/reports/html/UnitSize.html).
* Learn more about [how Sokrates analyzes units](units).


<br/>
### Conditional Complexity Report

![](assets/images/icons/conditional.svg)

Conditional complexity (also known as cyclomatic complexity) is a software metric (measurement), used to indicate the complexity of a program. It is a quantitative measure of the number of linearly independent paths through a program's source code.

Conditional complexity is measured at the unit level (methods, functions...).

Units are classified in four categories based on the measured McCabe index: 1-5 (simple units), 6-10 (medium complex units), 11-25 (complex units), 26+ (very complex units).

To learn more:
* See an example of a [Sokrates Conditional Complexity report](https://d3axxy9bcycpv7.cloudfront.net/java/junit4/reports/html/ConditionalComplexity.html).
* Learn more about [how Sokrates analyzes units](units).


<br/>
### Detailed Metrics Report

![](assets/images/icons/metrics.svg)

A list of all measurements.

To learn more:
* See an example of a [Sokrates Metrics report](https://d3axxy9bcycpv7.cloudfront.net/java/junit4/reports/html/Metrics.html).
* Learn more about [how Sokrates works with metrics](metrics).


<br/>
### Trend Report

![](assets/images/icons/trend.svg)

The trend report shows the difference in metrics between the latest measurements and previous reference measurements.

To learn more:
* See an [example of a Sokrates Trend report](https://d3axxy9bcycpv7.cloudfront.net/java/junit4/reports/html/Trend.html).
* Learn more about [how Sokrates analyzes trends](units).



<br/>
### Goals & Controls Report

![](assets/images/icons/goal.svg)

Semaphore-like controls, to get warnings based on the range or metric values.

To learn more:
* See an example of a [Sokrates Controls report](https://d3axxy9bcycpv7.cloudfront.net/java/junit5/reports/html/Controls.html).
* Learn more about [how Sokrates analyzes goals and controls](controls).


<br/>
## Landscape Report

The Socrates landscape analysis a utility that aggregates and indexes the results of Sokrates analyses, providing a centralized and uniform on the results of multiple Sokrates projects. The analysis is called landscape because it draws a map of all projects that you want to view from one place.

To learn more:
* See an example of a [Sokrates Landscape report](https://d3axxy9bcycpv7.cloudfront.net/_sokrates_landscape/index.html).
* Learn more about [how Sokrates creates the lanscape report](landscape).
