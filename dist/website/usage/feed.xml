<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/book/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/book/" rel="alternate" type="text/html" /><updated>2020-06-23T10:13:37+02:00</updated><id>http://localhost:4000/book/feed.xml</id><title type="html">Examined Line: The Art of Source Code Analysis with Sokrates</title><subtitle>A collection of articles on source code analysis with Sokrates.</subtitle><entry><title type="html">Understanding Sokrates Analytics</title><link href="http://localhost:4000/book/analytics" rel="alternate" type="text/html" title="Understanding Sokrates Analytics" /><published>2020-05-25T20:12:01+02:00</published><updated>2020-05-25T20:12:01+02:00</updated><id>http://localhost:4000/book/philosophy</id><content type="html" xml:base="http://localhost:4000/book/analytics">&lt;h4 id=&quot;counting&quot;&gt;Counting&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;“Sir Francis Bacon told a story, perhaps apocryphal, that illustrated just how empiricism was lost during the Middle Ages. The story was that a meeting of monks was taking place and the monks were hotly debating the issue of how many teeth were in the mouth of a horse. The problem was that they could not find the answer anywhere in Aristotle’s work. Then, a young monk, perhaps at his first such meeting, timidly suggested that, because they had all come to the meeting on horseback, that one way to get the answer would be simply to go outside and count. Bacon went on to say that the young monk was expelled from the meeting!”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Counting files and lines in files&lt;/p&gt;

&lt;h4 id=&quot;aggregating&quot;&gt;Aggregating&lt;/h4&gt;

&lt;h4 id=&quot;connecting&quot;&gt;Connecting&lt;/h4&gt;

&lt;h4 id=&quot;visualizing&quot;&gt;Visualizing&lt;/h4&gt;

&lt;p&gt;Basic chart&lt;/p&gt;

&lt;p&gt;SVG&lt;/p&gt;

&lt;p&gt;Graphviz&lt;/p&gt;

&lt;p&gt;3D&lt;/p&gt;

&lt;h4 id=&quot;exploring&quot;&gt;Exploring&lt;/h4&gt;

&lt;h4 id=&quot;reporting-story-tell-the-facts-facts-do-not-tell-the-story&quot;&gt;Reporting: Story Tell the Facts. Facts do not tell the Story&lt;/h4&gt;</content><author><name>by Željko Obrenović (zeljkoobrenovic.com)</name></author><summary type="html">Counting</summary></entry><entry><title type="html">Understanding Trends</title><link href="http://localhost:4000/book/trends" rel="alternate" type="text/html" title="Understanding Trends" /><published>2020-05-25T20:12:01+02:00</published><updated>2020-05-25T20:12:01+02:00</updated><id>http://localhost:4000/book/trend-analysis</id><content type="html" xml:base="http://localhost:4000/book/trends">&lt;p&gt;Trend analysis shows the difference between values measured at different times, comparing the results of the current analysis with previous reports.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/sokrates/trends-metrics.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Trend analysis gives the meaning to measurements through comparison. While it may be difficult to tell if some measured value is good or bad, it may still be possible to say if this value is becoming better or worse. For instance, you always have some level of duplication in code. You may not have the time and resources to refactor the system to remove all duplication. But you usually want to have a trend of reduced duplication. You can at least monitor the duplication level so that your new code does not increase overall code repetition.&lt;/p&gt;

&lt;p&gt;For more insights into the value of trend analysis, Sokrates recommends reading the section “Favor tracking trends over absolute numbers” in the article An Appropriate Use of Metrics, (MartinFowler.com):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;“Looking at trends provides more interesting information than whether or not a target is met. Working out if a goal is met is easy. The difficult work, and one that management must work with people with the skills to complete is looking at trends to see if they are moving in the desired direction and a fast enough rate. Trends provide leading indicators into the performance that emerges from organizational complexity. It is clearly pointless focusing on the gap in a number when a trend moves further and further away from a desired state.”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;sokrates-snapshots&quot;&gt;Sokrates Snapshots&lt;/h3&gt;

&lt;p&gt;Sokrates supports trend analysis by saving the snapshots of analysis results and comparing these snapshots with current values. Keeping of snapshots is optional, but if you enable these features, you can choose the saving frequency at three levels: daily, weekly, or monthly.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;trendAnalysis&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;saveHistory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;frequency&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;weekly&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;maxReferencePointsForAnalysis&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;historyFolder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;history&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Each snapshot is an archived file named &lt;strong&gt;analysisResults.zip&lt;/strong&gt;. It contains two JSON files: &lt;strong&gt;analysisResults.json&lt;/strong&gt;, with all measurements, and &lt;strong&gt;config.json&lt;/strong&gt;, with a copy of the Sokrates configuration at the time of the measurement.&lt;/p&gt;

&lt;p&gt;Sokrates stores snapshots files in the &lt;strong&gt;_sokrates/history/snapshots&lt;/strong&gt; folder. Each snapshot file has its own subfolder folder with the following naming conventions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;…/history/snapshots/years-month-day&lt;/strong&gt;&lt;br /&gt;for daily
snapshots (e.g., &lt;strong&gt;_sokrates/history/snapshots/2020-01-01&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;…/history/snapshots/years-weekInYear&lt;/strong&gt;&lt;br /&gt;for daily
weekly (e.g., &lt;strong&gt;_sokrates/history/snapshots/2020-42&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;…/history/snapshots/years-month&lt;/strong&gt;&lt;br /&gt;for monthly
snapshots (e.g. &lt;strong&gt;_sokrates/history/snapshots/2020-01&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/sokrates/trend-code-change-overview.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;analyzing-trends-retrospectivelly&quot;&gt;Analyzing Trends Retrospectivelly&lt;/h3&gt;

&lt;p&gt;If you have just started using Sokrates, you can still get the trend analysis by checking out the code at different moments in the past and running the Sokrates analysis against them to get the snapshots of source code from the past. The following line is the Git command to get your source code as it was on January 1, 2020:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git checkout &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;git rev-list &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;--first-parent&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2020-01-01 00:00&quot;&lt;/span&gt; master&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The following code fragment illustrates a more complex example, where you can get the analysis snapshot of any git repository at any date:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# prepare a temporary folder for Sokrates analysis&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; temp
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;temp
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; sokrates-config/&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; temp

&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;temp

&lt;span class=&quot;c&quot;&gt;# clone the repository&lt;/span&gt;
git clone &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt; temp-git-download
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;temp-git-download
&lt;span class=&quot;c&quot;&gt;# go back in time (the $3 parameter needs to be provided)&lt;/span&gt;
git checkout &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;git rev-list &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;--first-parent&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; 00:00&quot;&lt;/span&gt; master&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
&lt;span class=&quot;nb&quot;&gt;mv &lt;/span&gt;temp-git-download/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; temp-git-download


&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..

&lt;span class=&quot;c&quot;&gt;# run Sokrates analysis&lt;/span&gt;
java &lt;span class=&quot;nt&quot;&gt;-jar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Xmx10g&lt;/span&gt; sokrates.jar generateReports &lt;span class=&quot;nt&quot;&gt;-reportData&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-confFile&lt;/span&gt; temp/_sokrates/config.json &lt;span class=&quot;nt&quot;&gt;-outputFolder&lt;/span&gt; temp/_sokrates/reports &lt;span class=&quot;nt&quot;&gt;-reportAll&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# make history folders with apprpriate date in name&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir history&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir history&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# copy analysisResults.json and config.json&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;temp/_sokrates/reports/data/analysisResults.json &lt;span class=&quot;nb&quot;&gt;history&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;temp/_sokrates/reports/data/config.json &lt;span class=&quot;nb&quot;&gt;history&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; temp

&lt;span class=&quot;c&quot;&gt;# zip snapshot files&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd history&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt;
zip analysisResults.zip &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.json
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.json&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can then call this batch file as illustrated in the following example of JUnit4 repository:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;history

mkdir history
mkdir history&lt;/span&gt;/java

bash run-analysis-history.sh &lt;span class=&quot;s1&quot;&gt;'java/junit4'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://github.com/junit-team/junit4'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2020-01-01'&lt;/span&gt;
bash run-analysis-history.sh &lt;span class=&quot;s1&quot;&gt;'java/junit4'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://github.com/junit-team/junit4'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2019-01-01'&lt;/span&gt;
bash run-analysis-history.sh &lt;span class=&quot;s1&quot;&gt;'java/junit4'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://github.com/junit-team/junit4'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2018-01-01'&lt;/span&gt;
bash run-analysis-history.sh &lt;span class=&quot;s1&quot;&gt;'java/junit4'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://github.com/junit-team/junit4'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2017-01-01'&lt;/span&gt;
bash run-analysis-history.sh &lt;span class=&quot;s1&quot;&gt;'java/junit4'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://github.com/junit-team/junit4'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2016-01-01'&lt;/span&gt;
bash run-analysis-history.sh &lt;span class=&quot;s1&quot;&gt;'java/junit4'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://github.com/junit-team/junit4'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2015-01-01'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>by Željko Obrenović (zeljkoobrenovic.com)</name></author><summary type="html">Trend analysis shows the difference between values measured at different times, comparing the results of the current analysis with previous reports.</summary></entry><entry><title type="html">Understanding Metrics</title><link href="http://localhost:4000/book/metrics" rel="alternate" type="text/html" title="Understanding Metrics" /><published>2020-05-25T20:12:01+02:00</published><updated>2020-05-25T20:12:01+02:00</updated><id>http://localhost:4000/book/metrics</id><content type="html" xml:base="http://localhost:4000/book/metrics">&lt;p&gt;Sokrates metrics is a one-dimensional list of key value pairs. Severla conventions.&lt;/p&gt;</content><author><name>by Željko Obrenović (zeljkoobrenovic.com)</name></author><summary type="html">Sokrates metrics is a one-dimensional list of key value pairs. Severla conventions.</summary></entry><entry><title type="html">Understanding File Change History Analysis</title><link href="http://localhost:4000/book/history" rel="alternate" type="text/html" title="Understanding File Change History Analysis" /><published>2020-05-25T20:12:01+02:00</published><updated>2020-05-25T20:12:01+02:00</updated><id>http://localhost:4000/book/file-history-analysis</id><content type="html" xml:base="http://localhost:4000/book/history">&lt;p&gt;File change analysis takes as an input the list of dates on
 which source code files changes, and analyses
 these dates to understand how frequently developers have changed the files, how old are the files they, and how recently developers have updated them.&lt;/p&gt;

&lt;p&gt;Soknotes cannot itself get the dates of file changes from the source code files and folders. You need to provide a data changes list as a textual file and configure the link to this file in the Sokrates configuration file (you need to enter the path to this file in the field “filesAgeImportPath” in the analysis section of the configuration file).&lt;/p&gt;

&lt;p&gt;Sokrates uses as a convention the output that you can generate using git command-line tools. The following command is
 recommended for creating the list of changes for Sokrates analysis:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git ls-files &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; | xargs &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; git log &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%ai {}&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; git-history.txt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The previous command assumes that you are running it in the root of your source code project and that your source code project is a proper git repository (i.e., there should be a .git subfolder in the root folder of your project).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/sokrates/history-git-ls-files.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The command generates a textual file named &lt;strong&gt;git-history.txt&lt;/strong&gt;. The following fragment illustrates the format of this file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;date &amp;amp; time of change     path (from 27th character onwards)
2020-05-18 21:40:43 +0200 cli/src/main/java/nl/obren/sokrates/cli/CommandLineInterface.java
2020-05-17 22:31:03 +0200 cli/src/main/java/nl/obren/sokrates/cli/CommandLineInterface.java
2020-01-02 11:22:25 +0100 cli/src/main/java/nl/obren/sokrates/cli/CommandLineInterface.java
2019-12-15 11:04:41 +0100 cli/src/main/java/nl/obren/sokrates/cli/CommandLineInterface.java
2019-12-15 00:00:04 +0100 cli/src/main/java/nl/obren/sokrates/cli/CommandLineInterface.java
2019-12-14 23:47:19 +0100 cli/src/main/java/nl/obren/sokrates/cli/CommandLineInterface.java
2019-12-14 21:09:13 +0100 cli/src/main/java/nl/obren/sokrates/cli/CommandLineInterface.java
2019-12-14 16:11:16 +0100 cli/src/main/java/nl/obren/sokrates/cli/CommandLineInterface.java
2019-12-14 14:52:55 +0100 cli/src/main/java/nl/obren/sokrates/cli/CommandLineInterface.java
2019-12-11 11:05:57 +0100 cli/src/main/java/nl/obren/sokrates/cli/CommandLineInterface.java
2019-12-10 20:20:22 +0100 cli/src/main/java/nl/obren/sokrates/cli/CommandLineInterface.java
2019-12-02 13:50:55 +0100 cli/src/main/java/nl/obren/sokrates/cli/CommandLineInterface.java
2019-11-30 15:35:42 +0100 cli/src/main/java/nl/obren/sokrates/cli/CommandLineInterface.java
2019-11-29 21:35:16 +0100 cli/src/main/java/nl/obren/sokrates/cli/CommandLineInterface.java
2019-11-13 20:06:16 +0100 cli/src/main/java/nl/obren/sokrates/cli/CommandLineInterface.java
2019-11-09 21:21:11 +0100 cli/src/main/java/nl/obren/sokrates/cli/CommandLineInterface.java&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Each line in the file represents one change of one file. The first 26 characters of each line represent the date and time of a file update (e.g., a git commit). Sokrates currently uses only the date part of this string and ignores the time. The rest of the line contains the relative path to the file.&lt;/p&gt;

&lt;p&gt;While the command we used to generate a history file is a git specific command, Sokretes itself does not have any git dependencies. If you create this file using another tool, respecting the described format of each line, Sokrates will work with it.&lt;/p&gt;

&lt;p&gt;After you have generated the input file and configured Sokrates,
  you can create reports on file changes. The example of this report you can see here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/sokrates/history-report-generation.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sokrates provides three types of analyses on file changes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;file changes frequency&lt;/strong&gt;,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;file age&lt;/strong&gt;,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;file recency&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Sokrates’ file changes frequency analysis&lt;/strong&gt; identifies the most and least frequently changed files. Sokrates uses five categories to group files: files changed five or fewer times, files changed 6 to 20 times, files changed 21 to 50 times, files changed 51 to 100 times, and files changed over 100 times.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/sokrates/history-report-example-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Sokrates’ file age analysis&lt;/strong&gt; looks when the file creation date, assuming that the oldest date of the file update is its creation date. Sokrates groups files in the following five categories according to their age: files less than a month old, files one to three months old, files three to six months old, files six to 12 months old, and files more than a year old.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/sokrates/history-report-example-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Sokrates’ file changes frequency analysis&lt;/strong&gt; looks at the latest date at which the file has been changed. Sokrates groups files in the following five categories according to the recency of their changes: files changes in the past month, files changes one to three months ago, files changed three to six months ago, files changed six to 12 months ago, and files changed more than a year ago.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/sokrates/history-report-example-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you have an overview of files in their age, freshness, or update frequency categories, it may be interesting to compare the quality of code in these categories. Sokrates facilitates this process, creating the configuration files that you can use to automatically analyze source code so that each of the discussed categories is visible as a logical component. You can see if there are differences in code quality between files that are more or less frequently charged, older and new code, and so on. Sokrates creates three such configuration files in the &lt;strong&gt;_sokrates/reports/data/extra_analysis&lt;/strong&gt; folder:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;config_by_file_change_frequency.json&lt;/strong&gt;, configuring analysis so that componentization follows the frequency of file updates,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;config_by_file_age.json&lt;/strong&gt;, configuring analysis so that componentization follows the age of files, and&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;config_by_file_freshness.json&lt;/strong&gt;, configuring analysis so that componentization follows the last modification date of files.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>by Željko Obrenović (zeljkoobrenovic.com)</name></author><summary type="html">File change analysis takes as an input the list of dates on which source code files changes, and analyses these dates to understand how frequently developers have changed the files, how old are the files they, and how recently developers have updated them.</summary></entry><entry><title type="html">Understanding Units</title><link href="http://localhost:4000/book/units" rel="alternate" type="text/html" title="Understanding Units" /><published>2020-05-25T20:12:01+02:00</published><updated>2020-05-25T20:12:01+02:00</updated><id>http://localhost:4000/book/unit-analysis</id><content type="html" xml:base="http://localhost:4000/book/units">&lt;p&gt;A smallest reusable piece of code&lt;/p&gt;

&lt;h3 id=&quot;unit-processing&quot;&gt;Unit Processing&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/sokrates/units-processing.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;heuristics-used-to-extract-units&quot;&gt;Heuristics Used to Extract Units&lt;/h3&gt;

&lt;p&gt;Balanced Brackets&lt;/p&gt;

&lt;p&gt;Assumption of Proper Formatting&lt;/p&gt;

&lt;h3 id=&quot;unit-size&quot;&gt;Unit Size&lt;/h3&gt;

&lt;h3 id=&quot;conditional-complexity&quot;&gt;Conditional Complexity&lt;/h3&gt;</content><author><name>by Željko Obrenović (zeljkoobrenovic.com)</name></author><summary type="html">A smallest reusable piece of code</summary></entry><entry><title type="html">Understanding Duplication</title><link href="http://localhost:4000/book/duplication" rel="alternate" type="text/html" title="Understanding Duplication" /><published>2020-05-25T20:12:01+02:00</published><updated>2020-05-25T20:12:01+02:00</updated><id>http://localhost:4000/book/duplication</id><content type="html" xml:base="http://localhost:4000/book/duplication">&lt;h3 id=&quot;duplication-is-bad&quot;&gt;Duplication is Bad&lt;/h3&gt;

&lt;p&gt;I always wanted to say something smart about duplication and why it is bad. But others have done it years ago, and much better. So I will satisfy my wish to talk about duplication by quoting few of the online resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://martinfowler.com/ieeeSoftware/repetition.pdf&quot;&gt;Avoid Repetition&lt;/a&gt;, MartinFlower.com (IEEE Software article)
    &lt;ul&gt;
      &lt;li&gt;“&lt;em&gt;Avoiding repetition is a simple principle that leads to good design.&lt;/em&gt;”&lt;/li&gt;
      &lt;li&gt;“&lt;em&gt;I have an increasing sense that a pig-headed determination to remove all repetition can lead you a long way toward a good design and can help you apply and understand the patterns that are common in good designs.&lt;/em&gt;”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sourcemaking.com/refactoring/smells/duplicate-code&quot;&gt;Refactoring duplicated code&lt;/a&gt;, sourcemaking.com
    &lt;ul&gt;
      &lt;li&gt;“&lt;em&gt;Merging duplicate code simplifies the structure of your code and makes it shorter.&lt;/em&gt;”&lt;/li&gt;
      &lt;li&gt;“&lt;em&gt;Simplification + shortness = code that is easier to simplify and cheaper to support.&lt;/em&gt;”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://martinfowler.com/bliki/BeckDesignRules.html&quot;&gt;Beck Design Rules&lt;/a&gt;, MartinFowler.com
    &lt;ul&gt;
      &lt;li&gt;“&lt;em&gt;[No duplication] is a notion expressed elsewhere as DRY [Don’t Repeat Yourself] or SPOT [Single Point Of Truth], Kent expressed it as saying everything should be said “Once and only Once.” Many programmers have observed that the exercise of eliminating duplication is a powerful way to drive out good designs.&lt;/em&gt;”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.codinghorror.com/code-smells/&quot;&gt;Code Smells / Duplicated Code&lt;/a&gt;, Jeff Atwood, codinghorror.com:
    &lt;ul&gt;
      &lt;li&gt;“&lt;em&gt;Duplicated code is the bane of software development. Stamp out duplication whenever possible. You should always be on the lookout for more subtle cases of near-duplication, too. Don’t Repeat Yourself!&lt;/em&gt;”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/javarevisited/code-duplication-1e1f759a7fe3&quot;&gt;Code Duplication&lt;/a&gt;, Donald Raab
    &lt;ul&gt;
      &lt;li&gt;“&lt;em&gt;So, duplication sucks. The more rabidly a person hates duplication, the more I trust their opinions on managing information. A programmer, upon noticing some redundancy, should be thrown into a panic, begin hyperventilating, and stammer something about “¡El diablo! !El diablo está en mi software!. — Ryan King&lt;/em&gt;”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sourcemaking.com/antipatterns/cut-and-paste-programming&quot;&gt;The Cut-and-Paste Programming Software Development Anti-Pattern&lt;/a&gt;, sourcemaking.com
    &lt;ul&gt;
      &lt;li&gt;“&lt;em&gt;Cut-and-Paste Programming is a very common, but degenerate form of software reuse which creates maintenance nightmares.&lt;/em&gt;”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;analyzing-duplication&quot;&gt;Analyzing Duplication&lt;/h3&gt;

&lt;p&gt;For duplication, we look at places in code where there are six or more lines of code that are exactly the same. I reuse the treshold of siz lines as it is used in tools that measure duplication (e.g. see &lt;a href=&quot;https://www.harukizaemon.com/simian/features.html&quot;&gt;Simian&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;code ==&amp;gt; cleaned code ==&amp;gt; list of duplications ==&amp;gt; aggregation&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/sokrates/duplication-processing.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You should aim at having as little as possible (&amp;lt;5%) of duplicated code as high-level of duplication can lead to maintenance difficulties, poor factoring, and logical contradictions.&lt;/p&gt;

&lt;h3 id=&quot;aggregating-duplication-analysis-results&quot;&gt;Aggregating Duplication Analysis Results&lt;/h3&gt;

&lt;p&gt;At the overall project’s level&lt;/p&gt;

&lt;p&gt;At the extension’s level&lt;/p&gt;

&lt;p&gt;At logical decompositions’ level&lt;/p&gt;

&lt;h3 id=&quot;duplication-as-coupling&quot;&gt;Duplication as Coupling&lt;/h3&gt;

&lt;p&gt;Socrates also uses duplicates to show similarities among components as dependencies. Here, I borrow the idea from &lt;a href=&quot;https://martinfowler.com&quot;&gt;Marting Folwer’s&lt;/a&gt; article &lt;a href=&quot;https://martinfowler.com/ieeeSoftware/coupling.pdf&quot;&gt;Reducing Coupling&lt;/a&gt;, MartinFlower.com (IEEE Software article):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;“&lt;em&gt;There are several ways to describe coupling, but it boils down to this: If changing one module in a program requires changing another module, then coupling exists. … Duplication always implies coupling, because changing one piece of duplicate code implies changing the other.&lt;/em&gt;”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sokrates, draws a dependency diagram with each dependency defined as a number of lines duplicated between the components. Here is an example fromSokrates analysis:&lt;/p&gt;</content><author><name>by Željko Obrenović (zeljkoobrenovic.com)</name></author><summary type="html">Duplication is Bad</summary></entry><entry><title type="html">Understanding Finding Dependencies through Duplication and Change History</title><link href="http://localhost:4000/book/dependencies-alt" rel="alternate" type="text/html" title="Understanding Finding Dependencies through Duplication and Change History" /><published>2020-05-25T20:12:01+02:00</published><updated>2020-05-25T20:12:01+02:00</updated><id>http://localhost:4000/book/dependencies-duplication-temporal</id><content type="html" xml:base="http://localhost:4000/book/dependencies-alt">&lt;p&gt;In the previous section, we discussed a typical way to find dependencies among source code components. There, developers, through import or include statements, explicitly declare that some file depends on some other piece of code. To find dependencies, we then need to locate these statements and process them to identify a referenced component.&lt;/p&gt;

&lt;p&gt;In this section, we look at two additional ways to find implicitly find dependencies among components. Both of these dependency approaches build on a more general view of dependencies or coupling in code. Martin Fowler noted that while there are many definitions of coupling, they all boil down to one thing: if you need to change one piece of code, you may need to change another piece of code. Fowler suggested that duplication is coupling because if you change one piece of duplicated code, you usually need to change another copied piece of code.&lt;/p&gt;

&lt;p&gt;Building on Martin Fowler’s more general view on coupling, Sokrates introduces two additional dependency crews, dependency based on duplication between files and dependencies based on the history of file changes.&lt;/p&gt;

&lt;h3 id=&quot;duplication-dependencies&quot;&gt;Duplication Dependencies&lt;/h3&gt;

&lt;p&gt;The analysis of dependencies based on duplication looks at all duplicated pieces of code and counts how lines of code duplicated between the components, ignoring duplicates within the components. This dependency analysis is a part of the Sokrates’ duplication analyses. Sokrates displays duplication dependency as a link between components with the number of duplicated lines as a label. Sokrates also provides a detailed log of all duplicates if you want to know the details. When performing analysis, you can also define a threshold for deep heathen dependencies, so that Soknetes displays links between components only if the number of duplicated lines between components is above this threshold.&lt;/p&gt;

&lt;h3 id=&quot;file-change-history-dependencies&quot;&gt;File Change History Dependencies&lt;/h3&gt;

&lt;p&gt;Dependency analysis based on the files’ change history looks at all the files changed the same day. This dependency analysis is a part of the Sokrates’ file change history analyses. Sokrates then creates dependency as a link with a label showing the number of days in with simultaneous changes of files from two components. You can define a threshold of the minimal number of days, to filter small ad-hoc simultaneous changes of files. Sokrates considers two components connected if the number of days in which files have been simultaneously changed equals on is greater than the threshold. Dependency analysis based on file change history provides circumstantial evidence of potential coupling. It complements another two types of dependency analysis, which statically detected dependency, in the form of import statements or duplicated code.&lt;/p&gt;</content><author><name>by Željko Obrenović (zeljkoobrenovic.com)</name></author><summary type="html">In the previous section, we discussed a typical way to find dependencies among source code components. There, developers, through import or include statements, explicitly declare that some file depends on some other piece of code. To find dependencies, we then need to locate these statements and process them to identify a referenced component.</summary></entry><entry><title type="html">Understanding Finding Dependencies based on Text Patterns</title><link href="http://localhost:4000/book/dependencies" rel="alternate" type="text/html" title="Understanding Finding Dependencies based on Text Patterns" /><published>2020-05-25T20:12:01+02:00</published><updated>2020-05-25T20:12:01+02:00</updated><id>http://localhost:4000/book/dependencies</id><content type="html" xml:base="http://localhost:4000/book/dependencies">&lt;p&gt;&lt;em&gt;“And a thing is not seen because it is visible, but conversely, visible because it is seen”&lt;/em&gt; ― Socrates&lt;/p&gt;

&lt;p&gt;Sokrates analyses dependencies through simple text patterns searches. Such dependency analyses are not as detailed as the ones provided by specialized software tools.&lt;/p&gt;

&lt;p&gt;Sokrates focuses on finding dependencies between components and is not concerned with more detailed insights. There are are two main reasons for this. First, dependencies among the components are, from an architectural standpoint, the most relevant ones. While it may be interesting to know all dependencies between individual files or between units, what I miss the most in practice is the big picture, and Sokrates focuses exclusively on the big picture. Moreover, once when you understand the big picture, you can reliably obtain more detailed dependency data from your IDEs and code editors. Second, by concentrating on finding only the dependencies among components, you can simplify analysis and use simple heuristics with high accuracy.&lt;/p&gt;

&lt;p&gt;Sokrates’ pattern-based dependency analysis requires the existence of easily identifiable textual patterns that both, uniquely connect files in a shared component, and are present in places where there is a link, a dependency, to another component. Consequently, if such patterns do not exist if they are not unique or are challenging to find, you may not be able to identify the dependencies reliably.&lt;/p&gt;

&lt;p&gt;While limited at the detail level, the pattern-based identification of the dependencies is an extremely flexible and powerful mechanism that I have been using daily for years and with great success. For most languages, such analysis can replicate the level of accuracy that a more advanced and sophisticated static-code analysis tools analysis offer. But, if used wisely and with care, it also has some additional features, going beyond static code analysis tools. Such features include the possibility to identify dependencies entities defined in text constants or comments, such as dependencies to websites, APIs, or database tables, that regular classical static code analysis tools do not cover.&lt;/p&gt;

&lt;p&gt;Sokrates uses pattern-based dependency analysis in two places. The first place is the internal built-in dependency finders. Sokrates has several built-in dependency finders for mainstream programming languages so that you can get a basic dependency analysis of these languages for them without any extra configuration. The second place is a manual configuration, where you can define your own dependency finders based on the Sokrates pattern-based mechanisms. If a programming language supports build-in dependency finders you can still use your own custom dependency finders, and switch off the built-in ones.&lt;/p&gt;

&lt;h3 id=&quot;dependency-analysis-pragmatics-file-to-component-links&quot;&gt;Dependency Analysis Pragmatics: File to Component Links&lt;/h3&gt;

&lt;p&gt;Much simpler, technology independent, and robust mechanisms.&lt;/p&gt;

&lt;h3 id=&quot;build-in-dependency-finder-heuristics&quot;&gt;Build-in Dependency Finder Heuristics&lt;/h3&gt;

&lt;p&gt;For several common languages, Sokrates includes the build in pattern based dependency finders. You can use this build-in finders alon, or switch tem off and use your own configured finders. Here, I’ll describe few heuristics used to define patter dependencies in Sokrates build-in dependency finders.&lt;/p&gt;

&lt;p&gt;Build-in dependency finders use two types of heuristics:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;namespaces based dependency finders&lt;/li&gt;
  &lt;li&gt;path based includes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following heuristic is used in languages where files are organized in explicitly defined packages, modules or namespaces (e.g. Java, C#, Go, Scala, PHP, Groovy, Kotlin, Perl, Ruby, D):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Heuristic: the analysis assumes that the names of packages, modules or namespaces are present in source files, and are unique components (e.g. two components do not have files in the same package, module or namespace)&lt;/li&gt;
  &lt;li&gt;Limitation: not reliable if the same package, module or namespace is defined in two or more components&lt;/li&gt;
  &lt;li&gt;Logic:
    &lt;ul&gt;
      &lt;li&gt;Finding component patterns: looking for package, modules or namespaces definitions, normally at the beginning of the file. Extract full package, module or namespace.&lt;/li&gt;
      &lt;li&gt;Find dependencies:
        &lt;ul&gt;
          &lt;li&gt;look for import statement to packages, modules or namespaces&lt;/li&gt;
          &lt;li&gt;extract full package, module or namespace name from the import statement&lt;/li&gt;
          &lt;li&gt;if the full name in the import statement can be found in package statements on the other component, then add the dependency to that component&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Patterns that are likely to be unique for files in a components (e.g. java package heuristic)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/sokrates/dependencies-built-in-java-details.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/sokrates/dependencies-built-in-aggregated.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;custom-dependency-finders-linking-path-based-componentization-to-path-based-include-statements&quot;&gt;Custom Dependency Finders: Linking Path Based Componentization to Path-Based Include Statements&lt;/h3&gt;

&lt;p&gt;With the Sokrates configuration file, you can define your own pattern based dependency finders using the Sokrates String Transformation Language (SSTL). The key to this approach is defining a string transformation that maps a path or content of a file to a name of a component. For instance, lets assume that we have the project with following source code folders:&lt;/p&gt;

&lt;pre&gt;
src/
  vs/
    base/
      browser/
      common/
      node/
      parts/
      worker/
&lt;/pre&gt;

&lt;p&gt;Let’s also assume that we have componentized this projects based on the folder depth at levelt 3 (src/vs/base/*). This componentization created the following five components:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/sokrates/dependecies-patterns-components.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The files in this folder are TypeScript files, and they import other TypesScript file vai import statement that user path based referencing. I have identify the following convention that we can use to connect files from one component to files in another components:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;look for all files with path like “.&lt;em&gt;[.]ts” AND content like “import .&lt;/em&gt;from ‘vs/base.*”&lt;/li&gt;
  &lt;li&gt;for each file matching the previous criteria, extract, from the mathec content lines, the following regex pattern “base(/[a-zA-Z0-9_]+|)”&lt;/li&gt;
  &lt;li&gt;in the extracted string replace “base(/)?” with “” (empty string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When applied on the files, this leads to the following dependency diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/sokrates/dependencies-patterns-path.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These are the details of the browser – common dependencies:&lt;/p&gt;

&lt;pre&gt;
from: browser
to: common
evidence:
 - file: &quot;src/vs/base/browser/browser.ts&quot;
   contains &quot;import { Emitter, Event } from 'vs/base/common/event';&quot;

from: browser
to: common
evidence:
 - file: &quot;src/vs/base/browser/canIUse.ts&quot;
   contains &quot;import * as platform from 'vs/base/common/platform';&quot;

from: browser
to: common
evidence:
 - file: &quot;src/vs/base/browser/contextmenu.ts&quot;
   contains &quot;import { IAction, IActionRunner } from 'vs/base/common/actions';&quot;

from: browser
to: common
evidence:
 - file: &quot;src/vs/base/browser/dnd.ts&quot;
   contains &quot;import { Disposable } from 'vs/base/common/lifecycle';&quot;

from: browser
to: common
evidence:
 - file: &quot;src/vs/base/browser/dom.ts&quot;
   contains &quot;import { TimeoutTimer } from 'vs/base/common/async';&quot;

...

&lt;/pre&gt;

&lt;h3 id=&quot;custom-dependency-finders&quot;&gt;Custom Dependency Finders&lt;/h3&gt;

&lt;p&gt;You can use a configuration object within the logical decomposition section of the configuration file to define a custom dependency finder. This custom dependency finder section enables you to set a string transformation scripts that takes as an input a path or a line of file content and transforms the input string into a name. If this name matches the name of any component, then Sokraets creates a link between the file and the component. If the name does not match any component names, Sokrates treats the name as the name of an external component. Sokrates displays the names of external components with grey color, to distinguish them from internal components.&lt;/p&gt;

&lt;h3 id=&quot;custom-dependency-finders-linking-namespace-componentization-to-namespace-import-statements&quot;&gt;Custom Dependency Finders: Linking Namespace Componentization to Namespace Import Statements&lt;/h3&gt;

&lt;h3 id=&quot;custom-dependency-finders-identifying-external-links&quot;&gt;Custom Dependency Finders: Identifying External Links&lt;/h3&gt;

&lt;p&gt;Using Pattern-Based Dependency Finder to Look For Dynamic Links&lt;/p&gt;

&lt;p&gt;Grey block as external “components”, any string&lt;/p&gt;

&lt;p&gt;The following explicit meta-rules for finding dependencies are defined:
content like “.&lt;em&gt;github[.]com/[a-zA-Z0-9-_]+/[a-zA-Z0-9-_]+.&lt;/em&gt;”
extract (“github[.]com/[a-zA-Z0-9-_]+/[a-zA-Z0-9-_]+”)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/sokrates/dependencies-patterns-dynamic-dependencies.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://d3axxy9bcycpv7.cloudfront.net/ts/vscode/reports/html/Components.html&quot;&gt;VS Code Components and Dependecies&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;
from: extensions/html-language-features
to: github.com/Microsoft/vscode-html-languageservice
evidence:
 - file: &quot;extensions/html-language-features/package.nls.json&quot;
   contains &quot;	&quot;html.customData.desc&quot;: &quot;A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/Microsoft/vscode-html-languageservice/blob/master/docs/customData.md).\n\nVS Code loads custom data on startup to enhance its HTML support for the custom HTML tags, attributes and attribute values you specify in the JSON files.\n\nThe file paths are relative to workspace and only workspace folder settings are considered.&quot;,&quot;

from: extensions/html-language-features
to: github.com/Microsoft/vscode-html-languageservice
evidence:
 - file: &quot;extensions/html-language-features/schemas/package.schema.json&quot;
   contains &quot;					&quot;markdownDescription&quot;: &quot;A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/Microsoft/vscode-html-languageservice/blob/master/docs/customData.md).\n\nVS Code loads custom data on startup to enhance its HTML support for the custom HTML tags, attributes and attribute values you specify in the JSON files.\n\nThe file paths are relative to workspace and only workspace folder settings are considered.&quot;,&quot;
&lt;/pre&gt;</content><author><name>by Željko Obrenović (zeljkoobrenovic.com)</name></author><summary type="html">“And a thing is not seen because it is visible, but conversely, visible because it is seen” ― Socrates</summary></entry><entry><title type="html">Understanding Cross-Cutting Concerns</title><link href="http://localhost:4000/book/cross-cutting-concerns" rel="alternate" type="text/html" title="Understanding Cross-Cutting Concerns" /><published>2020-05-25T20:12:01+02:00</published><updated>2020-05-25T20:12:01+02:00</updated><id>http://localhost:4000/book/cross-cutting-concerns</id><content type="html" xml:base="http://localhost:4000/book/cross-cutting-concerns">&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Cross-cutting concerns are aspects of a software system that cannot be cleanly decomposed from the rest of the system.&lt;/li&gt;
    &lt;li&gt;A single concern may be present in multiple files. One source code file may contain multiple concerns.&lt;/li&gt;
    &lt;li&gt;A Sokrates enables defining multiple groups of cross-cutting concerns for each system.&lt;/li&gt;
    &lt;li&gt;A cross-cutting concerns can be defined in two ways in Sokrates.&lt;/li&gt;
    &lt;li&gt;The first approach is based on explicit definition of each concern. In such explicit definitions, concerns are explicitly named and their files are selected based on explicitly defined path and content filters.&lt;/li&gt;
    &lt;li&gt;The second approach is based on dynamic definition of concerns and their names. In such dynamic definitions, concerns are not explicitly named, but their names are derived based on script with string transformations of file path or content.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/sokrates/cross-cutting-concerns-static.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/sokrates/cross-cutting-concerns-dynamic-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/sokrates/cross-cutting-concerns-dynamic-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;general&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;concerns&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;exception handling&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;sourceFileFilters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;pathPattern&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.*[.]java&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;contentPattern&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.* try &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;{.*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;include&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;note&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;logging&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;sourceFileFilters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;pathPattern&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;contentPattern&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;import .*logging[.]Log.*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;include&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;note&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;file operations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;sourceFileFilters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;pathPattern&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;contentPattern&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;import .*java[.]io[.]File.*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;include&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;note&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>by Željko Obrenović (zeljkoobrenovic.com)</name></author><summary type="html">Cross-cutting concerns are aspects of a software system that cannot be cleanly decomposed from the rest of the system. A single concern may be present in multiple files. One source code file may contain multiple concerns. A Sokrates enables defining multiple groups of cross-cutting concerns for each system. A cross-cutting concerns can be defined in two ways in Sokrates. The first approach is based on explicit definition of each concern. In such explicit definitions, concerns are explicitly named and their files are selected based on explicitly defined path and content filters. The second approach is based on dynamic definition of concerns and their names. In such dynamic definitions, concerns are not explicitly named, but their names are derived based on script with string transformations of file path or content.</summary></entry><entry><title type="html">Understanding Logical Decomposition</title><link href="http://localhost:4000/book/logical-decomposition" rel="alternate" type="text/html" title="Understanding Logical Decomposition" /><published>2020-05-25T20:12:01+02:00</published><updated>2020-05-25T20:12:01+02:00</updated><id>http://localhost:4000/book/logical-decomposition</id><content type="html" xml:base="http://localhost:4000/book/logical-decomposition">&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Logical decomposition is a representation of, or a view on the organization of the main source code. In such a view every and each file is put in exactly one logical component.&lt;/li&gt;
    &lt;li&gt;A Sokrates enables defining multiple logical decompositions for each system.&lt;/li&gt;
    &lt;li&gt;In Sokrates, a logical decomposition is considered invalid if a file is selected into two or more components.This constraint is introduced in order to facilitate measuring of dependencies among components.&lt;/li&gt;
    &lt;li&gt;Files not assigned to any component are put into a special “Unclassified” component.&lt;/li&gt;
    &lt;li&gt;A logical decomposition can be defined in three ways in Sokrates.&lt;/li&gt;
    &lt;li&gt;First approach is based on the folders structure. Components are mapped to folders at defined folder depth relative to the source code root folder.&lt;/li&gt;
    &lt;li&gt;Second approach is based on explicit definition of each component. In such explicit definitions, components are explicitly named and their files are selected based on explicitly defined path and content filters.&lt;/li&gt;
    &lt;li&gt;Third approach is based on dynamic definition of components and their names. In such dynamic definitions, components are not explicitly named, but the name is derived based on script with string transformations of file path or content.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;defining-logical-decompositions&quot;&gt;Defining Logical Decompositions&lt;/h3&gt;

&lt;p&gt;You can define logical decomposition in Sokrates with two mechanisms:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;by exploiting already existing hierarchical organization of source code folders; and&lt;/li&gt;
  &lt;li&gt;by using regular expressions to filter and classify files in components.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;file-structure-componentization&quot;&gt;File Structure Componentization&lt;/h3&gt;

&lt;p&gt;The first approach to define logical decompositions works in projects where physical file structure reflects well the logical project structure. For instance, many projects organize source code into subprojects where each subfolder in the root of the project contains a subproject. Sokrates code follows this organization, see &lt;a href=&quot;https://github.com/zeljkoobrenovic/sokrates/&quot;&gt;the Sokrates’ GitHub source code root&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To define a logical decomposition based on the file structure, all you need to do is to specify the folder depth you want to use.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/sokrates/logical-decomposition-folder-depth.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;static-components&quot;&gt;Static Components&lt;/h3&gt;

&lt;p&gt;Defining logical decomposition with regular expressions is a more complex but much more flexible and powerful approach.&lt;/p&gt;

&lt;p&gt;In its simplest form, you can use regular expressions to classify files into pre-defined components. For each such component, you need to specify a name and a list of regular expressions for including the files. This approach is straightforward, but its main drawback is the need to explicitly define and name each component.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/sokrates/logical-decomposition-static.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dynamic-components&quot;&gt;Dynamic Components&lt;/h3&gt;

&lt;p&gt;An even more flexible approach is to name components dynamically based on the string transformations of file paths or content. For instance, in one of the projects I worked on, we defined each component with a “lib-“ prefix. Instead of listing all components manually, we can define a simple rule that will add components dynamically. This rule will work perfectly as long as we use the “lib-“ convention in naming components.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/sokrates/logical-decomposition-dynamic-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/sokrates/logical-decomposition-dynamic-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;logicalDecompositions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;primary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;componentsFolderDepth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;package level&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;componentsFolderDepth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>by Željko Obrenović (zeljkoobrenovic.com)</name></author><summary type="html">Logical decomposition is a representation of, or a view on the organization of the main source code. In such a view every and each file is put in exactly one logical component. A Sokrates enables defining multiple logical decompositions for each system. In Sokrates, a logical decomposition is considered invalid if a file is selected into two or more components.This constraint is introduced in order to facilitate measuring of dependencies among components. Files not assigned to any component are put into a special “Unclassified” component. A logical decomposition can be defined in three ways in Sokrates. First approach is based on the folders structure. Components are mapped to folders at defined folder depth relative to the source code root folder. Second approach is based on explicit definition of each component. In such explicit definitions, components are explicitly named and their files are selected based on explicitly defined path and content filters. Third approach is based on dynamic definition of components and their names. In such dynamic definitions, components are not explicitly named, but the name is derived based on script with string transformations of file path or content.</summary></entry></feed>